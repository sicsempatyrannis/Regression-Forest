
import numpy as np
import pandas as pd

class CART(object):
    
    def __init__(self, tree = 'cls', criterion = 'gini', prune = 'depth', max_depth = 4, min_gain = 0.05):
        self.feature = None
        self.label = None
        self.n_samples = None
        self.gain = None
        self.left = None 
        self.right = None
        self.threshold = None 
        self.depth = 0
        self.root = None 
        self.criterion = criterion
        self.prune = prune
        self.max_depth = max_depth
        self.min_criterion = min_gain
        self.tree = tree
        
    def fit(self, features, target):
        
        self.root = CART()
        if (self.tree == 'cls'):
            self.root.grow_tree(features, target, self.criterion)
        else:
            self.root.grow_tree(features, target, 'mse')
        self.root._prune(self.prune, self.max_depth, self.min_criterion, self.root.n_samples)
    
    def predict(self, features):
        
        return np.array([self.root._predict(f) for f in features])
    
    def grow_tree(self, features, target, criterion = 'gini'):
        self.n_samples = features.shape[0] 

        if len(np.unique(target)) == 1:
            self.label = target[0]
            return

        best_gain = 0.0
        best_feature = None
        best_threshold = None

        if criterion in {'gini', 'entropy'}:
            self.label = max([(c, len(target[target == c])) for c in np.unique(target)], key = lambda x : x[1])[0]
        else:
            self.label = np.mean(target)

        impurity_node = self.calc_entropy(criterion, target)   # Calculates impurity for target based on criterion
        
        for col in range(features.shape[1]):                     # Loops through all datapoints
            feature_level = np.unique(features[:,col])
            thresholds = (feature_level[:-1] + feature_level[1:]) / 2.0 # Divides features into two parts

            for threshold in thresholds:
                
                # Left of threshold
                target_l = target[features[:,col] <= threshold]      
                impurity_l = self.calc_entropy(criterion, target_l)   # Left impurity
                n_l = float(target_l.shape[0]) / self.n_samples

                # Right of threshold
                target_r = target[features[:,col] > threshold]
                impurity_r = self.calc_entropy(criterion, target_r)   # Right impurity
                n_r = float(target_r.shape[0]) / self.n_samples

                impurity_gain = impurity_node - (n_l * impurity_l + n_r * impurity_r)
                if impurity_gain > best_gain:                           # Best gain swapped if impurity gain calculated is larger
                    best_gain = impurity_gain
                    best_feature = col
                    best_threshold = threshold

        # Best feature, gain and threshold for current tree            
        self.feature = best_feature               
        self.gain = best_gain
        self.threshold = best_threshold
        self.split_tree(features, target, criterion)  
        
    def split_tree(self, features, target, criterion):
        
        features_left = features[features[:, self.feature] <= self.threshold]
        target_left = target[features[:, self.feature] > self.threshold]
        self.left = CART()
        self.left.depth = self.depth + 1
        self.left.grow_tree(features_left, target_left, criterion)
        
        features_right = features[features[:, self.feature] <= self.threshold]
        target_right = target[features[:, self.feature] > self.threshold]
        self.right = CART()
        self.right.depth = self.depth + 1
        self.right.grow_tree(features_right, target_right, criterion)
    
    def calc_entropy(self, criterion, target):
        
        if criterion == 'gini':
            return 1.0 - sum([(float(len(target[target == c])) / float(target.shape[0])) ** 2 for c in np.unique(target)])
        
        elif criterion == 'mse':
            mse = np.mean((target - np.mean(target)) ** 2)
                
            return mse
        else:
            entropy = 0
            for a in np.unique(target):
                p = float(len(target[target == a]) / target.shape[0])
                
                if p > 0:
                    entropy -= p * np.log(p)
            
            return entropy
        
    def _prune(self, method, max_depth, min_gain, n_samples):
        if self.feature is None:
            return
        
        self.left._prune(method, max_depth, min_gain, n_samples)
        self.right_prune(method, max_depth, min_gain, n_samples)
        
        pruning = False
        
        if method == 'impurity' and self.left.feature is None and self.right.feature is None:
            if (self.gain * float(self.n_samples) / n_samples) < min_gain:
                pruning = True
            
        elif method == 'depth' and self.depth >= max_depth:
            pruning = True
            
        if pruning is True:
            self.left = None 
            self.right = None 
            self.feature = None
            
    def _predict(self, j):
        
        if self.feature != None:
            if j[self.feature] <= self.threshold:
                return self.left._predict(j)
            else:
                return self.right_predict(j)
        else: 
            return self.label
        
    def show_tree(self, depth, condition):
        
        indent = '   ' * depth + condition
        if self.feature != None:
            print(indent + 'ifx[' + str(self.feature) + '] <=' + str(self.threshold))
            self.left.show_tree(depth + 1, 'then ')
            self.right.show_tree(depth + 1, 'else ')
        else:
            print(indent + '{value: ' + str(self.label) + ', samples: ' + str(self.n_samples) + '}')  
    
    
sarcos_original = pd.read_csv('sarcos_inv.csv')
sarcos_original.columns = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22']

sarcos_norm = (sarcos_original - sarcos_original.mean())/sarcos_original.std()

y = sarcos_norm['22'].values
x = sarcos_norm[[i for i in sarcos_original.columns if i != '22']].values
x = pd.DataFrame(x)
X = x.values

split = int(X.shape[0] * 0.6)

X_train = X[:split,:]
y_train = y[:split]

X_test = X[split:,:]
y_test = y[split:]

model = CART(tree = 'reg', criterion = 'mse', prune = 'depth', max_depth = 3)
model.fit(X_train, y_train)
model.print_tree()

y_pred = model.predict(X_test)
